#!/usr/bin/env node

var async       = require('async'),
    fs          = require('fs'),
    JSON5       = require('json5'),
    path        = require('path'),
    spawnSync   = require('spawn-sync'),
    tildeExpand = require('tilde-expansion'),
    util        = require('util'),
    yargs       = require('yargs');

var program = require('yargs')
    .option('n', {
        alias    : 'name',
        describe : 'tmux session name (required)',
        type     : 'string'
    })
    .option('c', {
        alias    : 'config',
        describe : 'config object; see below',
        type     : 'string'
    });

var argv = program.argv;

if (!argv.name) {
    program.showHelp();
    var helpFile = path.join(__dirname, 'help', 'tmux-session.txt');
    process.stdout.write(fs.readFileSync(helpFile).toString());
    process.exit(1);
}

console.error('tmux ls');

var tmuxLs = spawnSync('tmux', ['ls']),
    stdout = tmuxLs.stdout.toString().trim(),
    stderr = tmuxLs.stderr.toString().trim();

if (tmuxLs.status != 0) {
    // tmux 1.6: 'failed to connect to server'
    // tmux 2.0: 'failed to connect to server: Connection refused'
    // tmux 2.1: 'no server running on /tmp/...'
    if (!/^(failed to connect to server|no server running on)/.test(stderr)) {
        throw new Error(util.format(
            'Unexpected tmux exit code %d - stderr: %s',
            tmuxLs.status,
            stderr
        ));
    }
} else {
    stdout.split('\n').forEach(function(line) {
        var sessionName = line.split(':')[0];
        if (sessionName == argv.name) {
            throw new Error(util.format(
                "tmux session '%s' already exists",
                argv.name
            ));
        }
    });
}

function runTmux(args, options) {
    console.error('tmux %s', args.join(' '));
    var tmux = spawnSync('tmux', args, options);
    if (tmux.error || tmux.status != 0) {
        throw new Error(util.format(
            "tmux command 'tmux %s' failed with %s: %s",
            args.join(' '),
            (tmux.error ? tmux.error.message : 'code' + tmux.status),
            (tmux.stderr || '').toString().trim()
        ));
    }
    return tmux.stdout.toString().trim();
}

function startSession(sessionName, config, wd) {
    delete process.env.TMUX;
    runTmux(['new-session', '-s', sessionName, '-d'], {
        cwd : wd
    });

    async.forEachOfSeries(config.windows || [], function(win, i, next) {
        var windowFn = (i > 0 ? addWindow : setUpFirstWindow);
        // FIXME: Windows created after the first don't respect the `cwd`
        // setting used to start the tmux session.
        var wd = (i > 0 ? win.wd || config.wd : win.wd);
        if (wd) {
            tildeExpand(wd, windowFn);
        } else {
            windowFn(null);
        }

        function addWindow(wd) {
            var args = ['new-window', '-t', sessionName];

            if (wd) {
                args = args.concat(['-c', wd]);
            }
            runTmux(args);

            setUpFirstWindow();
        }

        function setUpFirstWindow(wd) {
            if (win.name) {
                runTmux(['rename-window', '-t', sessionName + ':' + i, win.name]);
            }
            if (wd) {
                // If the first window has a window-specific working directory,
                // set it using `cd`.
                runTmux([
                    'send-keys', '-t', sessionName + ':' + i,
                    '-l', 'cd "' + wd + '"'
                ]);
                runTmux(['send-keys', '-t', sessionName + ':' + i, 'Enter']);
            }
            if (win.command) {
                runTmux(['send-keys', '-t', sessionName + ':' + i, '-l', win.command]);
                if (win.pressEnter !== false) {
                    runTmux(['send-keys', '-t', sessionName + ':' + i, 'Enter']);
                }
            }
            next();
        }
    });
}

function parseWorkingDirectoryAndStartSession(name, config) {
    var windows = config.windows || [];

    if (config.wd) {
        tildeExpand(config.wd, function(wd) {
            startSession(name, config, wd);
        });
    } else {
        startSession(name, config);
    }
}

if (argv.config) {
    parseWorkingDirectoryAndStartSession(argv.name, JSON5.parse(argv.config));
} else {
    // read config from stdin
    var stdin = '';

    process.stdin.on('data', function(buf) {
        stdin += buf.toString();
    }).on('end', function() {
        parseWorkingDirectoryAndStartSession(argv.name, JSON5.parse(stdin));
    }).resume();
}
